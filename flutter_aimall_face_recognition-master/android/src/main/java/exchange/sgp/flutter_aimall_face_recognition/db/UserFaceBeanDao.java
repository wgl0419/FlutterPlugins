package exchange.sgp.flutter_aimall_face_recognition.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import exchange.sgp.flutter_aimall_face_recognition.bean.UserFaceBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "user_face".
*/
public class UserFaceBeanDao extends AbstractDao<UserFaceBean, Long> {

    public static final String TABLENAME = "user_face";

    /**
     * Properties of entity UserFaceBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property Email = new Property(2, String.class, "email", false, "EMAIL");
        public final static Property Mobile = new Property(3, String.class, "mobile", false, "MOBILE");
        public final static Property FaceToken = new Property(4, String.class, "faceToken", false, "FACE_TOKEN");
        public final static Property Feature = new Property(5, byte[].class, "feature", false, "FEATURE");
    }


    public UserFaceBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserFaceBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"user_face\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UID\" TEXT NOT NULL ," + // 1: uid
                "\"EMAIL\" TEXT," + // 2: email
                "\"MOBILE\" TEXT," + // 3: mobile
                "\"FACE_TOKEN\" TEXT NOT NULL ," + // 4: faceToken
                "\"FEATURE\" BLOB NOT NULL );"); // 5: feature
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_user_face_UID_EMAIL_MOBILE ON \"user_face\"" +
                " (\"UID\" ASC,\"EMAIL\" ASC,\"MOBILE\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"user_face\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserFaceBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUid());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(3, email);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
        stmt.bindString(5, entity.getFaceToken());
        stmt.bindBlob(6, entity.getFeature());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserFaceBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUid());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(3, email);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
        stmt.bindString(5, entity.getFaceToken());
        stmt.bindBlob(6, entity.getFeature());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserFaceBean readEntity(Cursor cursor, int offset) {
        UserFaceBean entity = new UserFaceBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // email
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mobile
            cursor.getString(offset + 4), // faceToken
            cursor.getBlob(offset + 5) // feature
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserFaceBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getString(offset + 1));
        entity.setEmail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMobile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFaceToken(cursor.getString(offset + 4));
        entity.setFeature(cursor.getBlob(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserFaceBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserFaceBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserFaceBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
